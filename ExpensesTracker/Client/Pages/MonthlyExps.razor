@page "/monthlyexp"
@inject IMonthlyExpService MonthlyExpService
@inject NavigationManager NavigationManager
@inject HttpClient http

<PageTitle>Monthly Expenses</PageTitle> <!-- this is how we will define this file in navmenu-->
<h3>Monthly Expenses</h3>

<EditForm Model="expenseFilter" OnSubmit="FilterButton">
    <InputSelect @bind-Value="expenseFilter.Year">
        <option value="0">All Years</option>
        @foreach (var year in Dates.Years)
        {
            <option value="@year">@year</option>
        }
    </InputSelect>
    <InputSelect @bind-Value="expenseFilter.Month">
        <option value="0">All Months</option>
        @foreach (var month in Enum.GetValues(typeof(Dates.Months)))
        {
            <option value="@((int)month)">@month</option>
        }
    </InputSelect>
    <InputSelect @bind-Value="expenseFilter.CategoryId">
        <option value="0">All Categories</option>
        @foreach (var category in MonthlyExpService.Categories)
        {
            <option value="@category.Id">@category.Title</option>
        }
    </InputSelect>
    <button type="submit" class="btn btn-primary">Filter</button>
</EditForm>

<button class="btn btn-primary" @onclick="AscOrDesc">Order</button>
&nbsp;
<button class="btn btn-success" @onclick="CreateExpense">Add New</button>
&nbsp; &nbsp;
<form @onsubmit="OnUploadFiles">
    <div>
        <br />
        <InputFile id="file-upload" OnChange="@OnInputFileChange" />
        <button type="submit" class="btn btn-outline-primary">Upload File</button>
        <h5>@message</h5>
    </div>
    <br />
</form>

<table class="table">
    <thead>
        <tr>
            <th>Date</th>
            <th>Money</th>
            <th>Comment</th>
            <th>Category</th>
            <th></th>
        </tr>
    </thead>

    <tbody>
        @foreach (var expense in MonthlyExpService.MonthlyExps)
        {
            <!-- reading data if foreach loop -->
            <tr>
                <td>@expense.Year-@expense.Month.ToString("D2")-@expense.Day.ToString("D2")</td>
                <td>@expense.Money</td>
                <td>@expense.Comment</td>
                <td>@expense.Category.Title</td>
                <td>
                    <button class="btn btn-primary" @onclick="(() => ShowExp(expense.Id))"><i class="oi oi-pencil"></i></button>
                    &nbsp;
                    <button class="btn btn-danger" @onclick="(() => DeleteExp(expense.Id))">Delete</button>
                </td>
            </tr>
        }
    </tbody>
</table>

@code {
    private string message = "No File selected";
    IReadOnlyList<IBrowserFile>? selectedFiles;

    protected override async Task OnInitializedAsync()
    {
        await MonthlyExpService.GetMonthlyExps();
        await MonthlyExpService.GetCategories();
    }

    void ShowExp(int id)
    {
        NavigationManager.NavigateTo($"expense/{id}");
    }

    async Task AscOrDesc()
    {
        await MonthlyExpService.GetOrderedMonthlyExps();
    }

    MonthlyExp expenseFilter = new MonthlyExp { Category = new Category() };

    async Task FilterButton()
    {
        await MonthlyExpService.ShowFilters(expenseFilter);
    }

    void CreateExpense()
    {
        NavigationManager.NavigateTo("/expense");
    }

    async Task DeleteExp(int id)
    {
        await MonthlyExpService.DeleteExpense(id);
        NavigationManager.NavigateTo("/monthlyexp");
    }

    private void OnInputFileChange(InputFileChangeEventArgs e)
    {
        selectedFiles = e.GetMultipleFiles();
        message = "File selected";
        this.StateHasChanged();
    }

    private async void OnUploadFiles()
    {
        foreach (var file in selectedFiles)
        {
            var stream = new MemoryStream();
            await file.OpenReadStream().CopyToAsync(stream);
            string fullList = ConvertBytesToString(stream.ToArray());


            List<string> lines = new List<string>();
            lines = fullList.Split('\n').ToList<string>();

            message = $"{file.Name} has been uploaded successfully";
            foreach (string line in lines)
            {
                if (line.Length >= 6)
                {
                    try
                    {
                        List<string> list = new List<string>();
                        list = line.Split(',').ToList();
                        MonthlyExp expense = new MonthlyExp { Money = Double.Parse(list.ElementAt(0)), Comment = list.ElementAt(1), CategoryId = Int32.Parse(list.ElementAt(2)), Year = Int32.Parse(list.ElementAt(3)), Month = Int32.Parse(list.ElementAt(4)), Day = Int32.Parse(list.ElementAt(5)) };
                        await MonthlyExpService.CreateExpense(expense);
                    }
                    catch (Exception e)
                    {
                        message = "Some expenses were written in invalid form :/";
                    }
                }
            }
            this.StateHasChanged();
            //NavigationManager.NavigateTo("/monthlyexp");
        }
    }

    public string ConvertBytesToString(byte[] bytes)
    {
        string output = String.Empty;
        MemoryStream stream = new MemoryStream(bytes);
        stream.Position = 0;
        using (StreamReader reader = new StreamReader(stream))
        {
            output = reader.ReadToEnd();
        }
        return output;
    }
}
