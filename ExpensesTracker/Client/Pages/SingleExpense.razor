@page "/expense"
@page "/expense/{id:int}"
@inject IExpensesService ExpensesService
@inject NavigationManager NavigationManager

@if (Id == null)
{
	<PageTitle>Add a new expense</PageTitle>
	<h3>Add a new expense</h3>
}
else
{
	<PageTitle>Edit</PageTitle>
	<h3>Edit</h3>
}

<EditForm Model="ExpensesService.singleExpense" OnValidSubmit="@Submit">
	<DataAnnotationsValidator />
	<ValidationSummary />
	<div>
		<label for="money"> Money</label>
		<InputNumber id="money" @bind-Value="ExpensesService.singleExpense.Money"></InputNumber>
	</div>
	<div>
		<label for="comment"> Comment</label>
		<InputText id="comment" @bind-Value="ExpensesService.singleExpense.Comment"></InputText>
	</div>
	<div>
		<label for="category"> Category</label>
		<InputSelect @bind-Value="ExpensesService.singleExpense.CategoryId">
			@foreach(var category in ExpensesService.Categories){
				<option value="@category.Id">@category.Title</option>
			}
		</InputSelect>
	</div>
	<div>
		<label> Date </label>
		<InputSelect @bind-Value="ExpensesService.singleExpense.Year">
        @*<option selected disabled="true">--Select Year--</option>*@
        @foreach (var year in Dates.Years)
        {
            <option value="@year">@year</option>
        }
    </InputSelect>
		<InputSelect @bind-Value="ExpensesService.singleExpense.Month">
		@*<option selected disabled="true">--Select Month--</option>*@
        @foreach (var month in Enum.GetValues(typeof(Dates.Months)))
        {
            <option value="@((int)month)">@month</option>
        }
    </InputSelect>
		<InputSelect @bind-Value="ExpensesService.singleExpense.Day">
			@if (ExpensesService.singleExpense.Month != 0 || ExpensesService.singleExpense.Year != 0)
			{
				@for (int day = 1; day <= DateTime.DaysInMonth(ExpensesService.singleExpense.Year, ExpensesService.singleExpense.Month); day++)
		{
		<option value="@day">@day</option>
		}
		}

    </InputSelect>
	</div>
	<br />
	<button type="submit" class="btn btn-primary">@buttonText</button>
	<button type="submit" class="btn btn-danger" @onclick="GoBack"> Cancel</button>
</EditForm>
@code {

	[Parameter]
	public int? Id { get; set; }

	string buttonText = string.Empty;
	protected override async Task OnInitializedAsync()
	{
		if(Id == null){
			buttonText = "Save new entry";
		}
		else{
			buttonText = "Update entry";
		}
		await ExpensesService.GetCategories();
	}

	protected override async Task OnParametersSetAsync()
	{	
		if(Id == null)
		{
			DateTime currentDate = DateTime.Now;
			ExpensesService.singleExpense.Category = ExpensesService.Categories[0];
			ExpensesService.singleExpense.CategoryId = ExpensesService.singleExpense.Category.Id;
			ExpensesService.singleExpense.Year = currentDate.Year;
			ExpensesService.singleExpense.Month = currentDate.Month;
			ExpensesService.singleExpense.Day = currentDate.Day;
		}
		else{
			ExpensesService.singleExpense = await ExpensesService.GetSingleExpense((int)Id);
		}
	}

	async Task Submit()
	{ 
		if (Id == null)
		{
			await ExpensesService.CreateExpense(ExpensesService.singleExpense);
			NavigationManager.NavigateTo("/expenses");
		}
		else
		{
			await ExpensesService.UpdateExpense(ExpensesService.singleExpense);
		}
	}

	public void GoBack()
	{
		NavigationManager.NavigateTo("/expenses");
	}

}